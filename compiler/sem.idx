commonTypeBegin	compiler/sem.html#commonTypeBegin.t	sem: commonTypeBegin(): PType	
commonType	compiler/sem.html#commonType,PType,PType	sem: commonType(x, y: PType): PType	
commonType	compiler/sem.html#commonType,PType,PNode	sem: commonType(x: PType; y: PNode): PType	
newSymG	compiler/sem.html#newSymG,TSymKind,PNode,PContext	sem: newSymG(kind: TSymKind; n: PNode; c: PContext): PSym	
pushProcCon	compiler/sem.html#pushProcCon,PContext,PSym	sem: pushProcCon(c: PContext; owner: PSym)	
notFoundError	compiler/sem.html#notFoundError,PContext,PNode,seq[CandidateError]	sem: notFoundError(c: PContext; n: PNode; errors: CandidateErrors)	
instGenericConvertersArg	compiler/sem.html#instGenericConvertersArg,PContext,PNode,TCandidate	sem: instGenericConvertersArg(c: PContext; a: PNode; x: TCandidate)	
instGenericConvertersSons	compiler/sem.html#instGenericConvertersSons,PContext,PNode,TCandidate	sem: instGenericConvertersSons(c: PContext; n: PNode; x: TCandidate)	
tyUserDefinedGenerics	compiler/sem.html#tyUserDefinedGenerics	sem: tyUserDefinedGenerics	
tyMagicGenerics	compiler/sem.html#tyMagicGenerics	sem: tyMagicGenerics	
tyGenericLike	compiler/sem.html#tyGenericLike	sem: tyGenericLike	
semPass	compiler/sem.html#semPass	sem: semPass	
