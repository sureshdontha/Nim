checkConstructedType	compiler/semtypinst.html#checkConstructedType,ConfigRef,TLineInfo,PType	semtypinst: checkConstructedType(conf: ConfigRef; info: TLineInfo; typ: PType)	
searchInstTypes	compiler/semtypinst.html#searchInstTypes,PType	semtypinst: searchInstTypes(key: PType): PType	
cacheTypeInst	compiler/semtypinst.html#cacheTypeInst,PType	semtypinst: cacheTypeInst(inst: PType)	
LayeredIdTable	compiler/semtypinst.html#LayeredIdTable	semtypinst: LayeredIdTable	
TReplTypeVars	compiler/semtypinst.html#TReplTypeVars	semtypinst: TReplTypeVars	
initLayeredTypeMap	compiler/semtypinst.html#initLayeredTypeMap,TIdTable	semtypinst: initLayeredTypeMap(pt: TIdTable): LayeredIdTable	
newTypeMapLayer	compiler/semtypinst.html#newTypeMapLayer,TReplTypeVars	semtypinst: newTypeMapLayer(cl: var TReplTypeVars): LayeredIdTable	
replaceTypeVarsT	compiler/semtypinst.html#replaceTypeVarsT,TReplTypeVars,PType	semtypinst: replaceTypeVarsT(cl: var TReplTypeVars; t: PType): PType	
replaceTypeVarsN	compiler/semtypinst.html#replaceTypeVarsN,TReplTypeVars,PNode,int	semtypinst: replaceTypeVarsN(cl: var TReplTypeVars; n: PNode; start = 0): PNode	
instCopyType	compiler/semtypinst.html#instCopyType,TReplTypeVars,PType	semtypinst: instCopyType(cl: var TReplTypeVars; t: PType): PType	
eraseVoidParams	compiler/semtypinst.html#eraseVoidParams,PType	semtypinst: eraseVoidParams(t: PType)	
skipIntLiteralParams	compiler/semtypinst.html#skipIntLiteralParams,PType	semtypinst: skipIntLiteralParams(t: PType)	
instAllTypeBoundOp	compiler/semtypinst.html#instAllTypeBoundOp,PContext,TLineInfo	semtypinst: instAllTypeBoundOp(c: PContext; info: TLineInfo)	
initTypeVars	compiler/semtypinst.html#initTypeVars,PContext,ptr.LayeredIdTable,TLineInfo,PSym	semtypinst: initTypeVars(p: PContext; typeMap: ptr LayeredIdTable; info: TLineInfo; owner: PSym): TReplTypeVars	
replaceTypesInBody	compiler/semtypinst.html#replaceTypesInBody,PContext,TIdTable,PNode,PSym	semtypinst: replaceTypesInBody(p: PContext; pt: TIdTable; n: PNode; owner: PSym;\n                   allowMetaTypes = false): PNode	
replaceTypesForLambda	compiler/semtypinst.html#replaceTypesForLambda,PContext,TIdTable,PNode,PSym,PSym	semtypinst: replaceTypesForLambda(p: PContext; pt: TIdTable; n: PNode; original, new: PSym): PNode	
recomputeFieldPositions	compiler/semtypinst.html#recomputeFieldPositions,PType,PNode,int	semtypinst: recomputeFieldPositions(t: PType; obj: PNode; currPosition: var int)	
generateTypeInstance	compiler/semtypinst.html#generateTypeInstance,PContext,TIdTable,TLineInfo,PType	semtypinst: generateTypeInstance(p: PContext; pt: TIdTable; info: TLineInfo; t: PType): PType	
prepareMetatypeForSigmatch	compiler/semtypinst.html#prepareMetatypeForSigmatch,PContext,TIdTable,TLineInfo,PType	semtypinst: prepareMetatypeForSigmatch(p: PContext; pt: TIdTable; info: TLineInfo; t: PType): PType	
generateTypeInstance	compiler/semtypinst.html#generateTypeInstance.t,PContext,TIdTable,PNode,PType	semtypinst: generateTypeInstance(p: PContext; pt: TIdTable; arg: PNode; t: PType): untyped	
